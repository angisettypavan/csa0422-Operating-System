 Write a program to compute the average waiting time and turnaround time based on Preemptive shortest remaining processing time first (SRPT) algorithm for the following set of processes, with the arrival times and the CPU-burst times given in milliseconds
Process   Arrival Time Burst Time
P1		0		 5
P2		1		   3
P3		2		   3
P4		4		   1



#include<stdio.h>

void findWaitingTime(int processes[], int n,
						int bt[], int wt[])
{
	
	wt[0] = 0;

	
	for (int i = 1; i < n ; i++ )
		wt[i] = bt[i-1] + wt[i-1] ;
}


void findTurnAroundTime( int processes[], int n,
				int bt[], int wt[], int tat[])
{
	
	for (int i = 0; i < n ; i++)
		tat[i] = bt[i] + wt[i];
}


void findavgTime( int processes[], int n, int bt[])
{
	int wt[n], tat[n], total_wt = 0, total_tat = 0;

	
	findWaitingTime(processes, n, bt, wt);

	
	findTurnAroundTime(processes, n, bt, wt, tat);

	
	printf("Processes Burst time Waiting time Turn around time\n");

	
	for (int i=0; i<n; i++)
	{
		total_wt = total_wt + wt[i];
		total_tat = total_tat + tat[i];
		printf(" %d ",(i+1));
		printf("	 %d ", bt[i] );
		printf("	 %d",wt[i] );
		printf("	 %d\n",tat[i] );
	}
	int s=(float)total_wt / (float)n;
	int t=(float)total_tat / (float)n;
	printf("Average waiting time = %d",s);
	printf("\n");
	printf("Average turn around time = %d ",t);
}


int main()
{
	
	int processes[] = { 1, 2, 3};
	int n = sizeof processes / sizeof processes[0];

	
	int burst_time[] = {10, 5, 8};

	findavgTime(processes, n, burst_time);
	return 0;
}

Output:

Processes Burst time Waiting time Turn around time
 1       10      0       10
 2       5       10      15
 3       8       15      23
Average waiting time = 8
Average turn around time = 16

